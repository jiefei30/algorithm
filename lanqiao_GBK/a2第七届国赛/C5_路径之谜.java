package lanqiao_GBK.a2第七届国赛

���߽����;

/**·��֮��

С��ð��X�������ʿ��������һ����ֵĳǱ���
�Ǳ����ʲô��û�У�ֻ�з���ʯͷ�̳ɵĵ��档

����Ǳ������� n x n �����񡣡���ͼ1.png����ʾ��

��ϰ�ף���ʿҪ���������ߵ����Ͻǡ�
���Ժ���������ƶ���������б���ߣ�Ҳ������Ծ��
ÿ�ߵ�һ���·��񣬾�Ҫ��������������������һ����
���Ǳ�����ǽ�ͱ�ǽ�ڸ��� n �����ӣ�


ͬһ������ֻ������һ�Ρ��������������еķ���

���ֻ���������ϼ�����Ŀ�������ƶϳ���ʿ������·����

��ʱ�ǿ��Եģ�����ͼ1.png�е����ӡ�

�����Ҫ�������֪�������֣�����ʿ������·�����������ݱ�֤·��Ψһ��

���룺
��һ��һ������N(0<N<20)����ʾ������ N x N ������
�ڶ���N���������ո�ֿ�����ʾ���ߵļ����ϵ����֣������򶫣�
������N���������ո�ֿ�����ʾ���ߵļ����ϵ����֣��Ա����ϣ�

�����
һ�����ɸ���������ʾ��ʿ·����

Ϊ�˷����ʾ������Լ��ÿ��С������һ�����ִ����������ǿ�ʼ���: 0,1,2,3....
���磬ͼ1.png�еķ�����Ϊ��

0  1  2  3
4  5  6  7
8  9  10 11
12 13 14 15


ʾ����
�û����룺
4
2 4 3 4
4 3 3 3

����Ӧ�������
0 4 5 1 2 3 7 11 10 9 13 14 15·��֮��

С��ð��X�������ʿ��������һ����ֵĳǱ���
�Ǳ����ʲô��û�У�ֻ�з���ʯͷ�̳ɵĵ��档

����Ǳ������� n x n �����񡣡���ͼ1.png����ʾ��

��ϰ�ף���ʿҪ���������ߵ����Ͻǡ�
���Ժ���������ƶ���������б���ߣ�Ҳ������Ծ��
ÿ�ߵ�һ���·��񣬾�Ҫ��������������������һ����
���Ǳ�����ǽ�ͱ�ǽ�ڸ��� n �����ӣ�


ͬһ������ֻ������һ�Ρ��������������еķ���

���ֻ���������ϼ�����Ŀ�������ƶϳ���ʿ������·����

��ʱ�ǿ��Եģ�����ͼ1.png�е����ӡ�

�����Ҫ�������֪�������֣�����ʿ������·�����������ݱ�֤·��Ψһ��

���룺
��һ��һ������N(0<N<20)����ʾ������ N x N ������
�ڶ���N���������ո�ֿ�����ʾ���ߵļ����ϵ����֣������򶫣�
������N���������ո�ֿ�����ʾ���ߵļ����ϵ����֣��Ա����ϣ�

�����
һ�����ɸ���������ʾ��ʿ·����

Ϊ�˷����ʾ������Լ��ÿ��С������һ�����ִ����������ǿ�ʼ���: 0,1,2,3....
���磬ͼ1.png�еķ�����Ϊ��

0  1  2  3
4  5  6  7
8  9  10 11
12 13 14 15


ʾ����
�û����룺
4
2 4 3 4
4 3 3 3

����Ӧ�������
0 4 5 1 2 3 7 11 10 9 13 14 15
 * 
 * @author DELL
 *
 */
public class C5_·��֮�� {
	static int n;
	static int count;
	static int[] north;
	static int[] west;
	static int[] path;
	static int[][] map;
	static int[] curNorth;
	static int[] curWest;
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int step = 0;
		n = sc.nextInt();
		north = new int[n];
		west = new int[n];
		for(int i=0;i<n;i++) north[i] = sc.nextInt();
		for(int i=0;i<n;i++) {
			west[i] = sc.nextInt();
			step+=west[i];
		}
		path = new int[step];
		map = new int[n][n];
		curNorth = new int[n];
		curWest = new int[n];
		dfs(0,0);
		
	}
	public static void dfs(int x,int y) {
		if(map[x][y]!=1) {
			curNorth[y]++;
			curWest[x]++;
			if(x==n-1 && y==n-1 && curNorth[n-1] ==north[n-1] && curWest[n-1] ==west[n-1] &&count==path.length-1) {
				path[path.length-1] = n*n-1;
				for(int i=0;i<path.length;i++) System.out.print(path[i]+" ");
				System.exit(0);
			}else if(curNorth[y]<=north[y] && curWest[x]<=west[x]) {
				map[x][y]=1;
				path[count] = n*x+y;
				count++;
				for(int i=0;i<4;i++) {
					if(i==0 && y>0) dfs(x,y-1);
					else if(i==1 && x<n-1) dfs(x+1,y);
					else if(i==2 && y<n-1) dfs(x,y+1);
					else if(i==3 && x>0) dfs(x-1,y);
				}
				map[x][y]=0;
				count--;
			}
			curNorth[y]--;
			curWest[x]--;
		}
	}
}
